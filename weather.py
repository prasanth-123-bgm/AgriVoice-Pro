# -*- coding: utf-8 -*-
"""Weather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18gJmUeCYSmi097WAqSi80NlWjduxDEJz
"""

#!pip install requests --quiet
import requests
import json
#!pip install gTTS --quiet

import requests

def geocode_location(location):
    """
    Geocode a location name or PIN code using Nominatim.
    Returns (lat, lon, display_name) or (None, None, None) if not found.
    """
    url = f'https://nominatim.openstreetmap.org/search?format=json&q={location}'
    response = requests.get(url, headers={'User-Agent': 'AgriVoiceApp/1.0'})
    if response.status_code == 200 and response.json():
        result = response.json()[0]
        return float(result['lat']), float(result['lon']), result['display_name']
    else:
        return None, None, None

def get_weather_openmeteo(lat, lon):
    """
    Fetch current weather from Open-Meteo for given lat/lon.
    """
    url = (
        f"https://api.open-meteo.com/v1/forecast?"
        f"latitude={lat}&longitude={lon}&current_weather=true&hourly=relative_humidity_2m"
    )
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if "current_weather" in data:
            weather = data["current_weather"]
            temp = weather["temperature"]
            wind = weather["windspeed"]
            code = weather["weathercode"]
            # Map code to condition
            code_map = {0: "Clear", 1: "Mainly clear", 2: "Partly cloudy", 3: "Overcast", 45: "Fog", 48: "Depositing rime fog", 51: "Drizzle", 61: "Rain", 71: "Snow", 80: "Rain showers", 95: "Thunderstorm"}
            condition = code_map.get(code, "Unknown")
            # Try to get humidity from hourly data
            humidity = ''
            if "hourly" in data and "relative_humidity_2m" in data["hourly"]:
                humidity = data["hourly"]["relative_humidity_2m"][0]
            report = (
                f"{condition}, {temp}°C, Humidity: {humidity}%\n"
                f"Wind Speed: {wind} km/h"
            )
            return report
        else:
            return "❌ Weather information not available for this location."
    else:
        return "❌ Weather information not available for this location."

def get_weather_anywhere(location_or_coords):
    """
    Accepts a location name, PIN code, or 'lat,lon' string.
    Returns weather report string using Nominatim and Open-Meteo only.
    """
    # Try coordinates first
    try:
        lat, lon = map(float, location_or_coords.split(','))
        return get_weather_openmeteo(lat, lon)
    except Exception:
        # Not coordinates, treat as location name or PIN
        lat, lon, display_name = geocode_location(location_or_coords)
        if lat and lon:
            return get_weather_openmeteo(lat, lon)
        else:
            return f"❌ Could not find location: {location_or_coords}"


from gtts import gTTS  # (✅ all lowercase: gtts)

from IPython.display import Audio

def speak_weather(report, lang='te'):
    tts = gTTS(text=report, lang=lang)
    tts.save("weather.mp3")
    return Audio("weather.mp3")
def speak_weather(report, lang='hi'):
    tts = gTTS(text=report, lang=lang)
    tts.save("weather.mp3")
    return Audio("weather.mp3")
def speak_weather(report, lang='en'):
    tts = gTTS(text=report, lang=lang)
    tts.save("weather.mp3")
    return Audio("weather.mp3")

report = get_weather_openmeteo(50.1109, 8.6821) # Example coordinates for Frankfurt
speak_weather(report, lang='en')

report = get_weather_openmeteo(51.5074, -0.1278) # Example coordinates for London
speak_weather(report, lang='en')

report = get_weather_openmeteo(48.8566, 2.3522) # Example coordinates for Paris
speak_weather(report, lang='en')

report = get_weather_openmeteo(34.6937, 135.5023) # Example coordinates for Kyoto
speak_weather(report, lang='en')

report = get_weather_openmeteo(35.6762, 139.6503) # Example coordinates for Tokyo
speak_weather(report, lang='en')

report = get_weather_openmeteo(34.0522, -118.2437) # Example coordinates for Los Angeles
speak_weather(report, lang='en')

report = get_weather_openmeteo(40.7128, -74.0060) # Example coordinates for New York
speak_weather(report, lang='en')

report = get_weather_openmeteo(35.6895, 139.6917) # Example coordinates for Tokyo (again)
speak_weather(report, lang='en')

report = get_weather_openmeteo(34.6937, 135.5023) # Example coordinates for Kyoto (again)
speak_weather(report, lang='en')

report = get_weather_openmeteo(34.0522, -118.2437) # Example coordinates for Los Angeles (again)
speak_weather(report, lang='en')

report = get_weather_openmeteo(40.7128, -74.0060) # Example coordinates for New York (again)
speak_weather(report, lang='en')


def detect_language_hint(user_input):
    if "తెలుగులో" in user_input or "తెలుగు" in user_input:
        return "te"
    elif "हिंदी" in user_input or "हिन्दी" in user_input:
        return "hi"
    else:
        return "en"  # Default fallback

def weather_assistant(user_input, city):
    lang = detect_language_hint(user_input)

    if lang == "te":
        report = get_weather_openmeteo(50.1109, 8.6821) # Example coordinates for Frankfurt
    elif lang == "hi":
        report = get_weather_openmeteo(51.5074, -0.1278) # Example coordinates for London
    else:
        report = get_weather_openmeteo(48.8566, 2.3522) # Example coordinates for Paris

    return speak_weather(report, lang)

weather_assistant("తెలుగులో చెప్పు", "Guntur")
weather_assistant("हिंदी में बताओ", "Guntur")
weather_assistant("Tell me the weather", "Guntur")

weather_assistant("हिंदी में बताओ", "Guntur")

weather_assistant("Tell me the weather", "Guntur")

import joblib

